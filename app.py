import os
from flask import Flask, request, session, redirect, url_for, jsonify
from flask_session import Session
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler
from threading import Thread
import redis
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π ===
try:
    redis_url = os.getenv('REDIS_URL')
    app.config['SESSION_TYPE'] = 'redis'
    app.config['SESSION_PERMANENT'] = False
    app.config['SESSION_USE_SIGNER'] = True
    app.config['SESSION_KEY_PREFIX'] = 'health_assistant_'
    app.config['SESSION_REDIS'] = redis.from_url(redis_url)
    Session(app)
    logger.info("‚úÖ Redis session initialized successfully!")
except Exception as e:
    logger.error(f"‚ùå Redis session initialization failed: {e}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞ ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
bot = Bot(token=TELEGRAM_TOKEN)

# === Google OAuth 2.0 ===
GOOGLE_AUTH_REDIRECT = os.getenv('GOOGLE_AUTH_REDIRECT')
GOOGLE_CREDENTIALS = os.getenv('GOOGLE_CREDENTIALS')

# === Google OAuth Flow ===
try:
    flow = Flow.from_client_config(
        client_config=eval(GOOGLE_CREDENTIALS),
        scopes=[
            "https://www.googleapis.com/auth/fitness.activity.read",
            "https://www.googleapis.com/auth/fitness.body.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile",
            "openid"
        ],
        redirect_uri=GOOGLE_AUTH_REDIRECT
    )
    logger.info("‚úÖ Google OAuth flow initialized successfully!")
except Exception as e:
    logger.error(f"‚ùå Google OAuth flow initialization failed: {e}")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

# === Flask –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route('/')
def home():
    return "Health Assistant 360 is running!"


@app.route('/google_auth')
def google_auth():
    try:
        session.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏
        authorization_url, state = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true'
        )
        session['state'] = state
        session.modified = True  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        logger.info(f"‚úÖ OAuth state —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {state}")
        return redirect(authorization_url)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google OAuth: {e}")
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/googleauth/callback')
def google_auth_callback():
    try:
        state = request.args.get('state')
        session_state = session.get('state')

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info(f"Callback State: {state}, Session State: {session_state}")

        if not state:
            logger.error("‚ùå State –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ.")
            return "State is missing. Please try again.", 400

        if not session_state:
            logger.error("‚ùå State –≤ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return "Session expired. Please start the authorization again.", 400

        if state != session_state:
            logger.error(f"‚ùå State mismatch. Expected: {session_state}, Got: {state}")
            session.pop('state', None)
            return "State mismatch. Please try again.", 400

        if 'code' not in request.args:
            logger.error("‚ùå Missing 'code' parameter in callback.")
            return "Missing 'code' parameter. Please try again.", 400

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials
        session['credentials'] = credentials_to_dict(credentials)
        session.pop('state', None)
        session.modified = True
        logger.info("‚úÖ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return redirect(url_for('profile'))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google OAuth: {e}")
        session.pop('state', None)
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/profile')
def profile():
    if 'credentials' not in session:
        return redirect(url_for('google_auth'))
    
    credentials = Credentials(**session['credentials'])
    service = build('oauth2', 'v2', credentials=credentials)
    user_info = service.userinfo().get().execute()
    return jsonify(user_info)


@app.route('/health')
def health():
    if 'credentials' not in session:
        return redirect(url_for('google_auth'))
    
    credentials = Credentials(**session['credentials'])
    fitness_service = build('fitness', 'v1', credentials=credentials)
    data = fitness_service.users().dataset().aggregate(userId='me', body={
        "aggregateBy": [{"dataTypeName": "com.google.step_count.delta"}],
        "bucketByTime": {"durationMillis": 86400000},
    }).execute()
    return jsonify(data)


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('home'))


@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        dispatcher = Dispatcher(bot, None, workers=1)
        
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("profile", profile_command))
        dispatcher.add_handler(CommandHandler("health", health_command))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("logout", logout_command))
        dispatcher.add_handler(CommandHandler("google_auth", google_auth_command))
        
        dispatcher.process_update(update)
        return 'OK', 200
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ telegram_webhook: {e}")
        return f"Internal Server Error: {e}", 500


# === Telegram –ö–æ–º–∞–Ω–¥—ã ===

def start(update, context):
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Assistant 360! üöÄ")


def profile_command(update, context):
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Google: /google_auth")


def health_command(update, context):
    update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Fit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")


def help_command(update, context):
    update.message.reply_text(
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/health - –î–∞–Ω–Ω—ã–µ Google Fit\n"
        "/logout - –í—ã–π—Ç–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞"
    )


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
