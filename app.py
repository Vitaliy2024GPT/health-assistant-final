import os
import json
from flask import Flask, request, redirect, session, url_for
from flask_session import Session
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY')
app.config['SESSION_TYPE'] = 'filesystem'
Session(app)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = Bot(token=TELEGRAM_TOKEN)

# Google OAuth 2.0
google_credentials = json.loads(os.getenv('GOOGLE_CREDENTIALS'))
GOOGLE_REDIRECT_URI = os.getenv('GOOGLE_AUTH_REDIRECT')

flow = Flow.from_client_config(
    google_credentials,
    scopes=['https://www.googleapis.com/auth/fitness.activity.read',
            'https://www.googleapis.com/auth/fitness.body.read',
            'https://www.googleapis.com/auth/userinfo.profile',
            'https://www.googleapis.com/auth/userinfo.email',
            'openid'],
    redirect_uri=GOOGLE_REDIRECT_URI
)

# ====================
# üìå Flask –º–∞—Ä—à—Ä—É—Ç—ã
# ====================

@app.route('/')
def home():
    return 'Health Assistant 360 is running! üöÄ'


@app.route('/google_auth')
def google_auth():
    auth_url, _ = flow.authorization_url(prompt='consent')
    return redirect(auth_url)


@app.route('/googleauth/callback')
def google_auth_callback():
    try:
        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials
        session['google_credentials'] = credentials_to_dict(credentials)
        return redirect(url_for('profile'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google.', 500


@app.route('/profile')
def profile():
    credentials = session.get('google_credentials')
    if not credentials:
        return redirect(url_for('google_auth'))

    try:
        creds = Credentials(**credentials)
        service = build('oauth2', 'v2', credentials=creds)
        user_info = service.userinfo().get().execute()
        return f'–ü—Ä–∏–≤–µ—Ç, {user_info["name"]}! –í–∞—à email: {user_info["email"]}'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.', 500


@app.route('/health')
def health():
    credentials = session.get('google_credentials')
    if not credentials:
        return redirect(url_for('google_auth'))

    try:
        creds = Credentials(**credentials)
        fitness_service = build('fitness', 'v1', credentials=creds)
        data = fitness_service.users().dataset().aggregate(userId='me', body={
            "aggregateBy": [{"dataTypeName": "com.google.step_count.delta"}],
            "bucketByTime": {"durationMillis": 86400000},
            "startTimeMillis": 0,
            "endTimeMillis": 0
        }).execute()
        return f'–î–∞–Ω–Ω—ã–µ Google Fit: {data}'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google Fit: {e}")
        return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Google Fit.', 500


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('home'))


# ====================
# üìå Telegram Bot
# ====================

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Assistant 360! üöÄ\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/health - –î–∞–Ω–Ω—ã–µ Google Fit\n"
        "/logout - –í—ã–π—Ç–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞"
    )


def profile_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google: {GOOGLE_REDIRECT_URI}"
    )


def health_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º Google Fit."
    )


def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/health - –î–∞–Ω–Ω—ã–µ Google Fit\n"
        "/logout - –í—ã–π—Ç–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞"
    )


def logout_command(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")


def telegram_bot():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("profile", profile_command))
    dispatcher.add_handler(CommandHandler("health", health_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("logout", logout_command))

    updater.start_polling()
    updater.idle()


# ====================
# üìå –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ====================

def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }


# ====================
# üìå –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ====================

if __name__ == '__main__':
    from threading import Thread

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=telegram_bot)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=10000)
