from flask import Flask, redirect, request, session, url_for
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from flask_session import Session
import redis
import os
import logging

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'supersecretkey')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_USE_SIGNER'] = True
app.config['SESSION_KEY_PREFIX'] = 'health_assistant_'
app.config['SESSION_REDIS'] = redis.StrictRedis(host='localhost', port=6379, db=0)
Session(app)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
app.logger.setLevel(logging.INFO)

# OAuth –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
GOOGLE_CLIENT_SECRETS_FILE = 'client_secret.json'
SCOPES = [
    'https://www.googleapis.com/auth/userinfo.profile',
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/fitness.activity.read',
    'https://www.googleapis.com/auth/fitness.body.read'
]
REDIRECT_URI = 'https://health-assistant-final.onrender.com/googleauth/callback'


### 1. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.route('/google_auth')
def google_auth():
    flow = Flow.from_client_secrets_file(
        GOOGLE_CLIENT_SECRETS_FILE,
        scopes=SCOPES,
        redirect_uri=REDIRECT_URI
    )
    auth_url, state = flow.authorization_url(
        access_type='offline',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è refresh_token
        include_granted_scopes='true',
        prompt='consent'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
    )
    session['state'] = state
    app.logger.info(f'üîë OAuth state —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {state}')
    return redirect(auth_url)


### 2. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google
@app.route('/googleauth/callback')
def callback():
    state = session.get('state')
    if not state:
        app.logger.error('‚ùå State –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏.')
        return '–û—à–∏–±–∫–∞: State –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏.', 400

    flow = Flow.from_client_secrets_file(
        GOOGLE_CLIENT_SECRETS_FILE,
        scopes=SCOPES,
        state=state,
        redirect_uri=REDIRECT_URI
    )
    flow.fetch_token(authorization_response=request.url)

    credentials = flow.credentials
    session['credentials'] = {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

    if not credentials.refresh_token:
        app.logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token.')
        return '–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token.', 400

    app.logger.info('‚úÖ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    return redirect('/profile')


### 3. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/profile')
def profile():
    credentials_data = session.get('credentials')
    if not credentials_data:
        app.logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        return redirect('/google_auth')

    credentials = Credentials(
        token=credentials_data['token'],
        refresh_token=credentials_data['refresh_token'],
        token_uri=credentials_data['token_uri'],
        client_id=credentials_data['client_id'],
        client_secret=credentials_data['client_secret'],
        scopes=credentials_data['scopes']
    )

    if not credentials.refresh_token:
        app.logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token.')
        return '–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token', 400

    from googleapiclient.discovery import build
    service = build('oauth2', 'v2', credentials=credentials)
    user_info = service.userinfo().get().execute()

    return f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['name']}! –í–∞—à email: {user_info['email']}"


### 4. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@app.route('/logout')
def logout():
    session.clear()
    app.logger.info('‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞.')
    return redirect('/')


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000, debug=True)
