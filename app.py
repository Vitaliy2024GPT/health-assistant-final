import os
from flask import Flask, request, session, redirect, url_for, jsonify
from flask_session import Session
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
import redis
import logging

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ===
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∏ —Å–µ—Å—Å–∏–π ===
try:
    redis_url = os.getenv('REDIS_URL')
    app.config['SESSION_TYPE'] = 'redis'
    app.config['SESSION_PERMANENT'] = False
    app.config['SESSION_USE_SIGNER'] = True
    app.config['SESSION_KEY_PREFIX'] = 'health_assistant_'
    app.config['SESSION_REDIS'] = redis.from_url(redis_url)
    app.config['SESSION_COOKIE_NAME'] = 'health_assistant_session'
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['SESSION_COOKIE_SECURE'] = False
    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
    Session(app)
    logger.info("‚úÖ Redis session initialized successfully!")
except Exception as e:
    logger.error(f"‚ùå Redis session initialization failed: {e}")

# === Google OAuth ===
GOOGLE_AUTH_REDIRECT = os.getenv('GOOGLE_AUTH_REDIRECT')
GOOGLE_CREDENTIALS = os.getenv('GOOGLE_CREDENTIALS')

try:
    flow = Flow.from_client_config(
        client_config=eval(GOOGLE_CREDENTIALS),
        scopes=[
            "https://www.googleapis.com/auth/fitness.activity.read",
            "https://www.googleapis.com/auth/fitness.body.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile",
            "openid"
        ],
        redirect_uri=GOOGLE_AUTH_REDIRECT
    )
    logger.info("‚úÖ Google OAuth flow initialized successfully!")
except Exception as e:
    logger.error(f"‚ùå Google OAuth flow initialization failed: {e}")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def home():
    return "Health Assistant 360 is running!"


@app.route('/google_auth')
def google_auth():
    try:
        session.clear()
        authorization_url, state = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true',
            prompt='consent'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å refresh_token
        )
        session['state'] = state
        session.modified = True

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ Redis-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"‚úÖ OAuth state —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {state}")
        logger.info(f"‚úÖ Session –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è state: {dict(session)}")
        redis_client = redis.from_url(redis_url)
        logger.info(f"‚úÖ Redis –∫–ª—é—á–∏: {redis_client.keys('*')}")

        return redirect(authorization_url)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google OAuth: {e}")
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/googleauth/callback')
def google_auth_callback():
    try:
        state = request.args.get('state')
        session_state = session.get('state')

        logger.info(f"üîÑ Callback State: {state}, Session State: {session_state}")
        logger.info(f"üîÑ Session data: {dict(session)}")

        if not state:
            logger.error("‚ùå State –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ.")
            return "State is missing. Please try again.", 400

        if not session_state:
            logger.error("‚ùå State –≤ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return "Session expired. Please start the authorization again.", 400

        if state != session_state:
            logger.error(f"‚ùå State mismatch. Expected: {session_state}, Got: {state}")
            session.pop('state', None)
            return "State mismatch. Please try again.", 400

        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials

        if not credentials.refresh_token:
            logger.warning("‚ùó Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

        session['credentials'] = credentials_to_dict(credentials)
        session.pop('state', None)
        session.modified = True
        logger.info("‚úÖ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return redirect(url_for('profile'))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google OAuth: {e}")
        session.pop('state', None)
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/profile')
def profile():
    if 'credentials' not in session:
        logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏.")
        return redirect(url_for('google_auth'))
    
    credentials = Credentials(**session['credentials'])

    if not credentials.refresh_token:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token.")
        return "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.", 400

    try:
        service = build('oauth2', 'v2', credentials=credentials)
        user_info = service.userinfo().get().execute()
        return jsonify(user_info)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", 500


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('home'))


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
