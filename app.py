from flask import Flask, request, redirect, url_for, session, jsonify
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
import redis
import os
import json
import time
from io import StringIO

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'your_secret_key')

# Redis client for session management
redis_client = redis.StrictRedis(
    host=os.environ.get('REDIS_HOST', 'localhost'),
    port=int(os.environ.get('REDIS_PORT', 6379)),
    db=0,
    decode_responses=True
)

# Google OAuth configuration
SCOPES = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid',
    'https://www.googleapis.com/auth/fitness.body.read',
    'https://www.googleapis.com/auth/fitness.activity.read'
]
REDIRECT_URI = 'https://health-assistant-final.onrender.com/googleauth/callback'

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CLIENT_SECRET_JSON
def get_flow():
    google_credentials_json = os.environ.get('GOOGLE_CLIENT_SECRET_JSON')
    if not google_credentials_json:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CLIENT_SECRET_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    client_secrets = json.load(StringIO(google_credentials_json))
    return Flow.from_client_config(
        client_secrets,
        scopes=SCOPES,
        redirect_uri=REDIRECT_URI
    )

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Assistant 360! üöÄ"

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/profile')
def profile():
    chat_id = request.args.get('chat_id')
    if not chat_id:
        return "–ù–µ —É–∫–∞–∑–∞–Ω chat_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 400
    
    try:
        user_email = redis_client.get(f'user:{chat_id}:email')
        user_name = redis_client.get(f'user:{chat_id}:name')
        
        if user_email and user_name:
            return f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: {user_name}\nEmail: {user_email}"
        else:
            return redirect('/google_auth')
    except redis.RedisError as e:
        app.logger.error(f"Redis error: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 500

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google OAuth
@app.route('/google_auth')
def google_auth():
    state = os.urandom(24).hex()
    session['state'] = state
    try:
        redis_client.setex(state, 300, 'active')
    except redis.RedisError as e:
        app.logger.error(f"Redis error: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 500
    
    auth_url, _ = get_flow().authorization_url(state=state, access_type='offline', prompt='consent')
    return redirect(auth_url)

# Callback –¥–ª—è Google OAuth
@app.route('/googleauth/callback', methods=['GET'])
def google_auth_callback():
    state = request.args.get('state')
    if not state or not redis_client.get(state):
        return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 400
    
    try:
        flow = get_flow()
        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials
        user_info = build('oauth2', 'v2', credentials=credentials).userinfo().get().execute()
        
        chat_id = request.args.get('chat_id', 'unknown')
        redis_client.setex(f'user:{chat_id}:email', 3600, user_info.get('email', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        redis_client.setex(f'user:{chat_id}:name', 3600, user_info.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Fit
        fitness_service = build('fitness', 'v1', credentials=credentials)
        dataset = fitness_service.users().dataset().aggregate(
            userId='me',
            body={
                "aggregateBy": [{"dataTypeName": "com.google.weight"}, {"dataTypeName": "com.google.height"}],
                "bucketByTime": {"durationMillis": 86400000},
                "startTimeMillis": int((time.time() - 86400) * 1000),
                "endTimeMillis": int(time.time() * 1000)
            }
        ).execute()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis
        health_data = json.dumps(dataset)
        redis_client.setex(f'user:{chat_id}:health', 3600, health_data)
        
    except Exception as e:
        app.logger.error(f"OAuth callback failed: {str(e)}")
        return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 500
    finally:
        redis_client.delete(state)
    
    return redirect(f'https://health-assistant-final.onrender.com/health?chat_id={chat_id}')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/health')
def health():
    chat_id = request.args.get('chat_id')
    if not chat_id:
        return "–ù–µ —É–∫–∞–∑–∞–Ω chat_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 400
    
    try:
        health_data = redis_client.get(f'user:{chat_id}:health')
        if health_data:
            parsed_data = json.loads(health_data)
            return jsonify(parsed_data)
        else:
            return "–î–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Fit."
    except redis.RedisError as e:
        app.logger.error(f"Redis error: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 500

# –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@app.route('/logout')
def logout():
    chat_id = request.args.get('chat_id', 'unknown')
    redis_client.delete(f'user:{chat_id}:email')
    redis_client.delete(f'user:{chat_id}:name')
    return "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞
@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    if not data:
        app.logger.error("Empty or invalid webhook payload.")
        return jsonify({"error": "Invalid payload"}), 400
    
    message = data.get('message', {})
    text = message.get('text', '')
    chat_id = message.get('chat', {}).get('id')
    
    if not chat_id:
        app.logger.error("Chat ID not found in webhook payload.")
        return jsonify({"error": "Missing chat ID"}), 400
    
    if text == '/start':
        response_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Assistant 360! üöÄ"
    elif text == '/profile':
        response_text = f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é: https://health-assistant-final.onrender.com/profile?chat_id={chat_id}"
    elif text == '/health':
        response_text = f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º –æ –∑–¥–æ—Ä–æ–≤—å–µ: https://health-assistant-final.onrender.com/health?chat_id={chat_id}"
    elif text == '/help':
        response_text = '''üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
- /profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
- /health - –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ
- /logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
- /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    else:
        response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    
    return jsonify({
        "method": "sendMessage",
        "chat_id": chat_id,
        "text": response_text
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000, debug=True)
