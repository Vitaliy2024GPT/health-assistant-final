import os
from flask import Flask, request, session, redirect, url_for, jsonify
from flask_session import Session
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, Dispatcher
from threading import Thread
import redis
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY')

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π ===
app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_USE_SIGNER'] = True
app.config['SESSION_KEY_PREFIX'] = 'health_assistant_'
app.config['SESSION_REDIS'] = redis.from_url(os.getenv('REDIS_URL'))
Session(app)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞ ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
bot = Bot(token=TELEGRAM_TOKEN)

# === Google OAuth 2.0 ===
GOOGLE_AUTH_REDIRECT = os.getenv('GOOGLE_AUTH_REDIRECT')
GOOGLE_CREDENTIALS = os.getenv('GOOGLE_CREDENTIALS')

# === Google OAuth Flow ===
flow = Flow.from_client_config(
    client_config=eval(GOOGLE_CREDENTIALS),
    scopes=[
        "https://www.googleapis.com/auth/fitness.activity.read",
        "https://www.googleapis.com/auth/fitness.body.read",
        "openid", "email", "profile"
    ],
    redirect_uri=GOOGLE_AUTH_REDIRECT
)

# === Flask –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route('/')
def home():
    return "Health Assistant 360 is running!"


@app.route('/google_auth')
def google_auth():
    try:
        authorization_url, state = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true'
        )
        session['state'] = state
        return redirect(authorization_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google OAuth: {e}")
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/googleauth/callback')
def google_auth_callback():
    try:
        if session.get('state') != request.args.get('state'):
            logger.error("State mismatch. Possible CSRF attack.")
            return "State mismatch. Please try again.", 400

        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials
        session['credentials'] = credentials_to_dict(credentials)
        return redirect(url_for('profile'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google OAuth: {e}")
        return f"–û—à–∏–±–∫–∞ Google OAuth: {e}", 500


@app.route('/profile')
def profile():
    if 'credentials' not in session:
        return redirect(url_for('google_auth'))
    
    credentials = Credentials(**session['credentials'])
    service = build('oauth2', 'v2', credentials=credentials)
    user_info = service.userinfo().get().execute()
    return jsonify(user_info)


@app.route('/health')
def health():
    if 'credentials' not in session:
        return redirect(url_for('google_auth'))
    
    credentials = Credentials(**session['credentials'])
    fitness_service = build('fitness', 'v1', credentials=credentials)
    data = fitness_service.users().dataset().aggregate(userId='me', body={
        "aggregateBy": [{"dataTypeName": "com.google.step_count.delta"}],
        "bucketByTime": {"durationMillis": 86400000},
        "startTimeMillis": 0,
        "endTimeMillis": 1
    }).execute()
    return jsonify(data)


def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('home'))


@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        dispatcher = Dispatcher(bot, None, workers=1)
        
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("profile", profile_command))
        dispatcher.add_handler(CommandHandler("health", health_command))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("logout", logout_command))
        dispatcher.add_handler(CommandHandler("google_auth", google_auth_command))
        
        dispatcher.process_update(update)
        
        return 'OK', 200
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ telegram_webhook: {e}")
        return f"Internal Server Error: {e}", 500


# === Telegram –ö–æ–º–∞–Ω–¥—ã ===

def start(update, context):
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Assistant 360! üöÄ")


def profile_command(update, context):
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Google: /google_auth")


def health_command(update, context):
    update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Fit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")


def help_command(update, context):
    update.message.reply_text(
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/health - –î–∞–Ω–Ω—ã–µ Google Fit\n"
        "/logout - –í—ã–π—Ç–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/google_auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google"
    )


def logout_command(update, context):
    session.clear()
    update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")


def google_auth_command(update, context):
    auth_url = GOOGLE_AUTH_REDIRECT
    if auth_url:
        update.message.reply_text(
            f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google]({auth_url})",
            parse_mode='Markdown'
        )
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google OAuth.")


def start_telegram_bot():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("profile", profile_command))
    dispatcher.add_handler(CommandHandler("health", health_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("logout", logout_command))
    dispatcher.add_handler(CommandHandler("google_auth", google_auth_command))

    updater.start_webhook(
        listen='0.0.0.0',
        port=10000,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/telegram_webhook"
    )
    updater.idle()


if __name__ == '__main__':
    bot_thread = Thread(target=start_telegram_bot)
    bot_thread.start()
    app.run(host='0.0.0.0', port=10000)
